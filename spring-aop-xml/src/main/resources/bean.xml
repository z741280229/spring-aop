<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd">
    <bean id="accountService" class="com.zeno.study.service.impl.AccountServiceImpl"></bean>

    <bean id="logger" class="com.zeno.study.util.Logger"></bean>

    <!--Spring中基于XML的AOP配置步骤
        1、把通知Bean交给Spring管理
        2、使用aop:config标签表明开始AOP的配置
        3、使用aop:aspect标签表示配置切面
            id属性：是给切面提供一个唯一标识
            ref属性：是指定通知类的bean的Id
        4、在aop:aspect标签内部使用对应的标签配置相应的通知类型
                实例中printLog方法在切入点方法执行之前执行，所以是前置通知
                aop:before：标识配置前置通知
                    method属性：用于制定类中那个方法是前置通知
                    pointcut属性：用于指定切入点表达式，该表达式的含义指的就是对业务层中那些方法增强
            切入点表达式的写法：
                关键字：execution（表达式）
                表达式：
                访问修饰符  返回值  包名.包名.包名..类名.方法名（参数列表）
                标准表达式写法
                public void com.zeno.study.service.impl.AccountServiceImpl.saveAccount()
                访问修饰符可以省略
                void com.zeno.study.service.impl.AccountServiceImpl.saveAccount()
                返回值可以使用通配符表示返回值
                * com.zeno.study.service.impl.AccountServiceImpl.saveAccount()
                包名可以使用通配符，表示任意包，但是有几级包，就需要写几个*
                * *.*.*.*.*.AccountServiceImpl.saveAccount()
                包名可以使用..表示前包及其子包
                * *..AccountServiceImpl.saveAccount()
                类名和方法名都可以使用*来实现通配
                * *..*.*()
                参数列表：
                    可以直接写参数类型
                        基本应用类型执行写名称   如：int
                        应用类型写包名.类名的方式    如：java.lang.String
                        可以使用通配符表示任意类型，但是必须有参数
                        可是使用..表示有无参数均可，有参数可以是任意类型
            全通配写法
                * *..*.*(..)
            实际开发中切入点的表达式的通用写法：
                    切到业务层实现类下的所有方法
                    * com.zeno.study.service.impl.*.*(..))
      -->

    <!--配置AOP-->
    <aop:config>

        <!--需要方法aop:aspect标签之前，约束问题，否则报错-->
        <aop:pointcut id="pt1" expression="execution(* com.zeno.study.service.impl.*.*(..))"></aop:pointcut>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">

            <!--可以将pointcut抽取出来配置，未抽取之前如下-->
            <!--<aop:before method="beforePrintLog" pointcut="execution(* com.zeno.study.service.impl.*.*(..))"></aop:before>-->
            <!--配置前置通知：在切入点方法执行前执行-->
            <!--<aop:before method="beforePrintLog" pointcut-ref="pt1"></aop:before>-->
            <!--配置后置通知：在切入点方法正常执行之后执行，它和异常通知永远都只能执行一个-->
            <!--<aop:after-returning method="afterReturnPrintLog"  pointcut-ref="pt1"></aop:after-returning>-->
            <!--配置异常通知：在切入点方法执行产生异常之后执行，它和后置通知永远都只能执行一个-->
            <!--<aop:after-throwing method="afterThrowingPrintLog"  pointcut-ref="pt1"></aop:after-throwing>-->
            <!--配置最终通知：无论切入点方法是否正常执行，它都会在其后执行-->
            <!--<aop:after method="afterPrintLog"  pointcut-ref="pt1"></aop:after>-->

            <!--对pointcut进行抽取，此种方式只对该切面生效-->
            <!--<aop:pointcut id="pt1" expression="execution(* com.zeno.study.service.impl.*.*(..))"></aop:pointcut>-->

            <aop:around method="arroundPrintLog" pointcut-ref="pt1"></aop:around>
        </aop:aspect>

    </aop:config>
</beans>
